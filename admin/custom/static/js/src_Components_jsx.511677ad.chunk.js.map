{"version":3,"file":"static/js/src_Components_jsx.511677ad.chunk.js","mappings":"64BAKA,MAAMA,UAA2BC,EAAA,CAAU,CACvC,YAAYC,EAAO,CACf,MAAMA,CAAK,EACX,KAAK,YAAc,KAAK,MAAM,MAC9B,KAAK,cAAgB,EACzB,CAEA,oBAAqB,CACb,KAAK,MAAM,OAAS,CAAC,KAAK,gBAC1B,KAAK,cAAgB,GACrB,KAAK,MAAM,OAAO,OAAO,KAAM,oBAAqB,IAAI,EACnD,KAAKC,GAAU,CACRA,GAAA,MAAAA,EAAQ,WAAaA,EAAO,SAAWA,EAAO,WAC1CA,EAAO,YAAc,QAAUA,EAAO,UAAY,QAClD,KAAK,YAAY,OAAK,EAAE,4EAA6EA,EAAO,QAAQ,EAAG,OAAK,EAAE,uBAAuB,CAAC,EAC/IA,EAAO,YAAc,SAAWA,EAAO,UAAY,SAC1D,KAAK,YAAY,OAAK,EAAE;AAAA;AAAA,2BAA2HA,EAAO,QAAQ,EAAG,OAAK,EAAE,uBAAuB,EAAG,SAAS,EAG3N,CAAC,EACL,KAAK,MAAM,OAAO,OAAO,KAAM,gBAAiB,IAAI,EAC/C,KAAWA,GAAU,wBAClB,MAAMC,EAAO,KAAK,KAAK,MAAM,IAAI,EACjC,IAAIC,EAAU,IACVF,GAAA,YAAAA,EAAQ,YAAa,UAAYA,EAAO,WAAa,IACjDC,EAAK,YAAc,UAAYA,EAAK,eACpCA,EAAK,UAAY,SACjBC,EAAU,KAIdF,GAAA,YAAAA,EAAQ,YAAa,UACrBE,EAAU,GACVD,EAAK,eAAiB,MACfD,GAAA,YAAAA,EAAQ,YAAa,QAC5BE,EAAU,GACVD,EAAK,eAAiB,MAE1B,MAAME,EAAU,CAAC,MAAO,QAAS,SAAU,QAAS,WAAY,SAAS,EACzE,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAChC,GAAI,CAAC,KAAK,eAAeD,EAAQC,CAAC,CAAC,EAAG,CAClC,MAAMJ,EAAS,MAAM,KAAK,YAAYG,EAAQC,CAAC,EAAGH,CAAI,EACjD,MAAMI,GAAK,KAAK,UAAUA,CAAC,CAAC,EACjCH,EAAUA,GAAWF,EAAO,OAChC,CAGJE,GAAW,KAAK,MAAM,SAASD,CAAI,CACvC,CAAC,GAEb,CAEM,mBAAoB,gCACtB,mBAAM,0BAAN,IAAwB,EACxB,KAAK,UAAU,CACnB,CAAC,CAAD,CAEA,YAAa,CACT,OAAI,KAAK,cAAgB,KAAK,MAAM,QAChC,KAAK,YAAc,KAAK,MAAM,MAC1B,KAAK,aACL,KAAK,mBAAmB,GAIzB,KAAK,cAAc,CAC9B,CACJ,CAEAJ,EAAmB,UAAY,CAC3B,OAAQ,WAAiB,WACzB,UAAW,WACX,UAAW,WACX,MAAO,WACP,UAAW,WACX,KAAM,WAAiB,WACvB,KAAM,WACN,OAAQ,WACR,QAAS,SACT,SAAU,QACd,EAEA,QAAeA,EC9Ef,EAAe,CACX,aAAY,IACZ,UAAS,IACT,aAAY,IACZ,YAAW,IACX,sBAAqB,IACrB,SAAQ,IACR,cAAa,IACb,mBAAkB,CACtB,C","sources":["CheckDiskInvisible.jsx","Components.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\r\nimport { I18n } from '@iobroker/adapter-react-v5';\r\n\r\nimport BaseField from './BaseField';\r\n\r\nclass CheckDiskInvisible extends BaseField {\r\n    constructor(props) {\r\n        super(props);\r\n        this.storedAlive = this.props.alive;\r\n        this.storedChecked = false;\r\n    }\r\n\r\n    checkConfiguration() {\r\n        if (this.props.alive && !this.storedChecked) {\r\n            this.storedChecked = true;\r\n            this.props.socket.sendTo(null, 'getFileSystemInfo', null)\r\n                .then(result => {\r\n                    if (result?.diskState && result.storage && result.diskFree) {\r\n                        if (result.diskState === 'warn' && result.storage === 'local') {\r\n                            this.showMessage(I18n.t('On the host only %s MB free space is available! Please check your system!', result.diskFree), I18n.t('BackItUp Information!'));\r\n                        } else if (result.diskState === 'error' && result.storage === 'local') {\r\n                            this.showMessage(I18n.t('On the host only %s MB free space is available! Local backups are currently not possible. \\n\\nPlease check your system!', result.diskFree), I18n.t('BackItUp Information!'), 'warning');\r\n                        }\r\n                    }\r\n                });\r\n            this.props.socket.sendTo(null, 'getSystemInfo', null)\r\n                .then(async result => {\r\n                    const data = { ...this.props.data };\r\n                    let changed = false;\r\n                    if (result?.systemOS === 'docker' && result.dockerDB === false) {\r\n                        if (data.redisType !== 'remote' && data.redisEnabled) {\r\n                            data.redisType = 'remote';\r\n                            changed = true;\r\n                        }\r\n                    }\r\n\r\n                    if (result?.systemOS === 'docker') {\r\n                        changed = true;\r\n                        data._restoreIfWait = 10000;\r\n                    } else if (result?.systemOS === 'win') {\r\n                        changed = true;\r\n                        data._restoreIfWait = 18000;\r\n                    }\r\n                    const CONFIGS = ['ccu', 'mySql', 'sqlite', 'pgSql', 'influxDB', 'history'];\r\n                    for (let c = 0; c < CONFIGS.length; c++) {\r\n                        if (!this.isConfigFilled(CONFIGS[c])) {\r\n                            const result = await this.fetchConfig(CONFIGS[c], data)\r\n                                .catch(e => this.showError(e));\r\n                            changed = changed || result.changed;\r\n                        }\r\n                    }\r\n\r\n                    changed && this.props.onChange(data);\r\n                });\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        super.componentDidMount();\r\n        this.checkDisk();\r\n    }\r\n\r\n    renderItem() {\r\n        if (this.storedAlive !== this.props.alive) {\r\n            this.storedAlive = this.props.alive;\r\n            if (this.storedAlive) {\r\n                this.checkConfiguration();\r\n            }\r\n        }\r\n\r\n        return this.renderMessage();\r\n    }\r\n}\r\n\r\nCheckDiskInvisible.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default CheckDiskInvisible;\r\n","import AdapterExist from './AdapterExist';\r\nimport BackupNow from './BackupNow';\r\nimport DetectConfig from './DetectConfig';\r\nimport DetectConfigInvisible from './DetectConfigInvisible';\r\nimport GoogleDrive from './GoogleDrive';\r\nimport Instance from './Instance';\r\nimport RestoreBackup from './RestoreBackup';\r\nimport CheckDiskInvisible from './CheckDiskInvisible';\r\n\r\nexport default {\r\n    AdapterExist,\r\n    BackupNow,\r\n    DetectConfig,\r\n    GoogleDrive,\r\n    DetectConfigInvisible,\r\n    Instance,\r\n    RestoreBackup,\r\n    CheckDiskInvisible,\r\n};\r\n"],"names":["CheckDiskInvisible","BaseField","props","result","data","changed","CONFIGS","c","e"],"sourceRoot":""}